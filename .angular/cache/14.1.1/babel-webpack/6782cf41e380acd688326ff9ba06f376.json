{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@app/_services/authentication.service\";\nimport * as i4 from \"../_services/user.service\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/input\";\nimport * as i8 from \"@angular/material/button\";\n\nfunction LoginComponent_span_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tz_r4 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", tz_r4, \", \");\n  }\n}\n\nfunction LoginComponent_button_15_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 13);\n    i0.ɵɵlistener(\"click\", function LoginComponent_button_15_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.tzInput = \"\");\n    });\n    i0.ɵɵelementStart(1, \"mat-icon\");\n    i0.ɵɵtext(2, \"close\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction LoginComponent_mat_error_16_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"This field is mandatory.\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction LoginComponent_mat_error_16_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"This field is invalid.\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction LoginComponent_mat_error_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtemplate(1, LoginComponent_mat_error_16_span_1_Template, 2, 0, \"span\", 10);\n    i0.ɵɵtemplate(2, LoginComponent_mat_error_16_span_2_Template, 2, 0, \"span\", 10);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.loginForm.controls.tzNumber.errors.required);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.loginForm.controls.tzNumber.errors.pattern);\n  }\n}\n\nfunction LoginComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r3.error);\n  }\n}\n\nexport let LoginComponent = /*#__PURE__*/(() => {\n  class LoginComponent {\n    constructor(formBuilder, route, router, authenticationService, userService) {\n      this.formBuilder = formBuilder;\n      this.route = route;\n      this.router = router;\n      this.authenticationService = authenticationService;\n      this.userService = userService;\n      this.loading = false;\n      this.submitted = false;\n      this.error = '';\n      this.tzInput = '';\n      this.tzList = []; // redirect to home if already logged in\n\n      if (this.authenticationService.currentUserValue) {\n        this.router.navigate(['user-details']);\n      }\n    }\n\n    ngOnInit() {\n      this.loginForm = this.formBuilder.group({\n        tzNumber: ['', [Validators.required, this.forbiddenTzValidator()]]\n      });\n      this.userService.getAllTz().subscribe(tzList => {\n        this.tzList = tzList;\n      });\n    } // convenience getter for easy access to form fields\n\n\n    get f() {\n      return this.loginForm.controls;\n    }\n\n    onSubmit() {\n      this.submitted = true;\n      console.log(this.isIsraeliIdNumber(this.f.tzNumber.value)); // stop here if form is invalid\n\n      if (this.loginForm.invalid) {\n        console.log(\"The form is Invalid\");\n        return;\n      }\n\n      console.log(\"The form is VALID\");\n      this.loading = true;\n      this.authenticationService.login(this.f.tzNumber.value).pipe(first()).subscribe({\n        next: () => {\n          // get return url from route parameters or default to '/'\n          //const returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n          this.router.navigate(['user-details']);\n        },\n        error: error => {\n          this.error = error;\n          this.loading = false;\n        }\n      });\n    }\n\n    forbiddenTzValidator() {\n      return control => {\n        const forbidden = !this.isIsraeliIdNumber(control.value);\n        console.log(\"try validate\");\n        return forbidden ? {\n          forbiddenTz: {\n            value: control.value\n          }\n        } : null;\n      };\n    }\n\n    isIsraeliIdNumber(id) {\n      id = String(id).trim();\n      if (id.length > 9 || isNaN(id)) return false;\n      id = id.length < 9 ? (\"00000000\" + id).slice(-9) : id;\n      return Array.from(id, Number).reduce((counter, digit, i) => {\n        const step = digit * (i % 2 + 1);\n        return counter + (step > 9 ? step - 9 : step);\n      }) % 10 === 0;\n    }\n\n  }\n\n  LoginComponent.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.AuthenticationService), i0.ɵɵdirectiveInject(i4.UserService));\n  };\n\n  LoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"ng-component\"]],\n    decls: 20,\n    vars: 7,\n    consts: [[1, \"col-md-6\", \"offset-md-3\", \"mt-5\"], [1, \"card\"], [1, \"card-header\"], [1, \"alert\", \"alert-info\"], [4, \"ngFor\", \"ngForOf\"], [1, \"card-body\"], [3, \"formGroup\", \"ngSubmit\"], [\"appearance\", \"fill\", 1, \"example-form-field\"], [\"matInput\", \"\", \"formControlName\", \"tzNumber\", \"type\", \"number\", 3, \"ngModel\", \"ngModelChange\"], [\"matSuffix\", \"\", \"mat-icon-button\", \"\", \"aria-label\", \"Clear\", 3, \"click\", 4, \"ngIf\"], [4, \"ngIf\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"disabled\"], [\"class\", \"alert alert-danger mt-3 mb-0\", 4, \"ngIf\"], [\"matSuffix\", \"\", \"mat-icon-button\", \"\", \"aria-label\", \"Clear\", 3, \"click\"], [1, \"alert\", \"alert-danger\", \"mt-3\", \"mb-0\"]],\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h1\", 2);\n        i0.ɵɵtext(3, \"Management Test System with Angular 10 JWT - Elisha Lipkin\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 3)(5, \"h3\");\n        i0.ɵɵtext(6, \"Try login with any of those tz:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"br\");\n        i0.ɵɵtemplate(8, LoginComponent_span_8_Template, 2, 1, \"span\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 5)(10, \"form\", 6);\n        i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_10_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(11, \"mat-form-field\", 7)(12, \"mat-label\");\n        i0.ɵɵtext(13, \"Israel Passport ID\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"input\", 8);\n        i0.ɵɵlistener(\"ngModelChange\", function LoginComponent_Template_input_ngModelChange_14_listener($event) {\n          return ctx.tzInput = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(15, LoginComponent_button_15_Template, 3, 0, \"button\", 9);\n        i0.ɵɵtemplate(16, LoginComponent_mat_error_16_Template, 3, 2, \"mat-error\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"button\", 11);\n        i0.ɵɵtext(18, \"LogIn\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(19, LoginComponent_div_19_Template, 2, 1, \"div\", 12);\n        i0.ɵɵelementEnd()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngForOf\", ctx.tzList);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.tzInput);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.tzInput);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.loginForm.controls.tzNumber.touched && ctx.loginForm.controls.tzNumber.invalid);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", ctx.loading);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.error);\n      }\n    },\n    dependencies: [i5.NgForOf, i5.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i6.MatError, i6.MatFormField, i6.MatLabel, i6.MatSuffix, i7.MatInput, i8.MatButton],\n    encapsulation: 2\n  });\n  return LoginComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}